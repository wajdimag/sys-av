#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PLAYERS 3
#define MAX_ATTEMPTS 3

// Variables globales
int secretCode[4];
int currentPlayer = 0;
int attempts[NUM_PLAYERS] = {0};
bool gameWon = false;
bool gameOver = false;
pthread_mutex_t mutex;

// Fonction pour générer un code secret sans répétition
void generateSecretCode(int secretCode[]) {
    bool used[10] = { false };
    for (int i = 0; i < 4; i++) {
        int num;
        do {
            num = rand() % 10;
        } while (used[num]);
        secretCode[i] = num;
        used[num] = true;
    }
}

// Fonction pour évaluer le nombre de taureaux et de vaches
void evaluateGuess(int guess[], int *bulls, int *cows) {
    *bulls = 0;
    *cows = 0;
    for (int i = 0; i < 4; i++) {
        if (guess[i] == secretCode[i]) {
            (*bulls)++;
        } else {
            for (int j = 0; j < 4; j++) {
                if (i != j && guess[i] == secretCode[j]) {
                    (*cows)++;
                    break;
                }
            }
        }
    }
}

// Fonction pour vérifier si tous les joueurs ont épuisé leurs tentatives
bool allPlayersOutOfAttempts() {
    for (int i = 0; i < NUM_PLAYERS; i++) {
        if (attempts[i] < MAX_ATTEMPTS) {
            return false;
        }
    }
    return true;
}

// Fonction du thread pour chaque joueur
void* playerThread(void* arg) {
    int playerId = *(int*)arg;
    int guess[4];
    int bulls = 0, cows = 0;

    while (true) {
        pthread_mutex_lock(&mutex);

        // Vérifier si le jeu est terminé
        if (gameOver) {
            pthread_mutex_unlock(&mutex);
            break;
        }

        if (attempts[playerId] < MAX_ATTEMPTS) {
            printf("\nJoueur %d, entrez votre devinette (4 chiffres) : ", playerId + 1);
            for (int i = 0; i < 4; i++) {
                scanf("%d", &guess[i]);
            }

            attempts[playerId]++;
            evaluateGuess(guess, &bulls, &cows);

            printf("Taureaux : %d, Vaches : %d\n", bulls, cows);
            printf("Joueur %d - Tentative %d (il vous reste %d tentatives)\n", playerId + 1, attempts[playerId], MAX_ATTEMPTS - attempts[playerId]);

            // Vérifier si le joueur a trouvé le code
            if (bulls == 4) {
                printf("\nFélicitations Joueur %d ! Vous avez trouvé le nombre secret en %d tentatives.\n", playerId + 1, attempts[playerId]);
                gameWon = true;
                gameOver = true;
            }
        } else {
            printf("Joueur %d a épuisé ses %d tentatives.\n", playerId + 1, MAX_ATTEMPTS);
        }

        // Vérifier si tous les joueurs ont épuisé leurs tentatives
        if (allPlayersOutOfAttempts()) {
            gameOver = true;
        }

        pthread_mutex_unlock(&mutex);

        if (gameOver) {
            break;
        }

        sleep(1); // Petite pause pour éviter de boucler trop rapidement
    }

    return NULL;
}

int main() {
    srand(time(NULL));
    time_t startTime = time(NULL);

    // Générer le code secret
    generateSecretCode(secretCode);
    printf("Bienvenue dans le jeu Taureau-Vache pour %d joueurs !\n", NUM_PLAYERS);

    pthread_t threads[NUM_PLAYERS];
    int playerIds[NUM_PLAYERS];

    // Initialiser le mutex
    pthread_mutex_init(&mutex, NULL);

    // Créer les threads pour chaque joueur
    for (int i = 0; i < NUM_PLAYERS; i++) {
        playerIds[i] = i;
        pthread_create(&threads[i], NULL, playerThread, &playerIds[i]);
    }

    // Attendre la fin des threads
    for (int i = 0; i < NUM_PLAYERS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Calculer et afficher le temps total d'exécution
    time_t endTime = time(NULL);
    double gameDuration = difftime(endTime, startTime);
    printf("\nGame Over! Temps total d'exécution du jeu : %.2f secondes\n", gameDuration);

    // Détruire le mutex
    pthread_mutex_destroy(&mutex);

    return 0;
}