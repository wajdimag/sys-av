
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>

// Function to generate a 4-digit secret code without repetitions
void generateSecretCode(int secretCode[]) {
    bool used[10] = { false };
    for (int i = 0; i < 4; i++) {
        int num;
        do {
            num = rand() % 10;
        } while (used[num]); // Check if the digit has already been used
        secretCode[i] = num;
        used[num] = true;
    }
}

// Function to calculate the number of bulls and cows
void evaluateGuess(int guess[], int secretCode[], int *bulls, int *cows) {
    *bulls = 0;
    *cows = 0;
    bool guessUsed[4] = { false }, secretUsed[4] = { false };

    // Calculate bulls
    for (int i = 0; i < 4; i++) {
        if (guess[i] == secretCode[i]) {
            (*bulls)++;
            guessUsed[i] = true;
            secretUsed[i] = true;
        }
    }

    // Calculate cows
    for (int i = 0; i < 4; i++) {
        if (!guessUsed[i]) {
            for (int j = 0; j < 4; j++) {
                if (!secretUsed[j] && guess[i] == secretCode[j]) {
                    (*cows)++;
                    secretUsed[j] = true;
                    break;
                }
            }
        }
    }
}

int main() {
    srand(time(NULL));

    int secretCode[4];
    int guess[4];
    int bulls = 0, cows = 0;
    int player = 0;  // Player ID (0, 1, or 2 for 3 players)
    int attempts[3] = { 0, 0, 0 }; // Attempts counter for each player
    bool gameWon = false;

    // Generate the secret code at the start of the game
    generateSecretCode(secretCode);

    // Record the start time of the game
    time_t startTime = time(NULL);

    printf("Bienvenue dans le jeu Taureau-Vache pour 3 joueurs !\n");
    printf("Devinez le nombre secret de 4 chiffres (sans répétition).\n");

    // Main game loop
    while (!gameWon) {
        printf("\nJoueur %d, entrez votre devinette (4 chiffres) : ", player + 1);
       
        // Take input for each digit in the guess
        for (int i = 0; i < 4; i++) {
            scanf("%d", &guess[i]);
        }

        // Increment the attempt counter for the current player
        attempts[player]++;
        evaluateGuess(guess, secretCode, &bulls, &cows);

        printf("Taureaux : %d, Vaches : %d\n", bulls, cows);
        printf("Joueur %d - Tentative %d (il vous reste %d tentatives)\n", player + 1, attempts[player], 3 - attempts[player]);

        // Check if the player has guessed all 4 bulls (win condition)
        if (bulls == 4) {
            printf("\nFélicitations Joueur %d ! Vous avez trouvé le nombre secret en %d tentatives.\n", player + 1, attempts[player]);
            gameWon = true;
            break;
        } else if (attempts[player] == 3) {
            // If the player has used all 3 attempts
            printf("Joueur %d a épuisé ses 3 tentatives.\n", player + 1);
        }

        // Check if all players have used up their attempts
        if (attempts[0] == 3 && attempts[1] == 3 && attempts[2] == 3) {
            printf("\nGame Over! Aucun joueur n'a trouvé le nombre secret. Vous avez tous perdu, essayez de nouveau!\n");
            break;
        }

        // Pass turn to the next player (0 -> 1 -> 2 -> 0)
        player = (player + 1) % 3;
    }

    // Record the end time and calculate the total execution time
    time_t endTime = time(NULL);
    double gameDuration = difftime(endTime, startTime);
   
    printf("\nTemps total d'exécution du jeu : %.2f secondes\n", gameDuration);

    return 0;
}
